# Course Selling Website API Documentation

A backend API for a course selling platform that supports two types of users: Admins and Users.

## Authentication

All protected routes require a JWT token passed in the Authorization header:
```
Authorization: Bearer <your-token>
```

## Admin Routes

### Authentication

#### POST /admin/signup
Creates a new admin account.
- **Input Body**: 
```json
{
    "username": "admin",
    "password": "password"
}
```
- **Response**: 
```json
{
    "message": "Admin created successfully"
}
```

#### POST /admin/signin
Authenticates an admin and returns a JWT token.
- **Input Body**: 
```json
{
    "username": "admin",
    "password": "password"
}
```
- **Response**: 
```json
{
    "token": "<jwt-token>"
}
```

### Course Management

#### POST /admin/courses
Creates a new course. Requires admin authentication.
- **Headers**: Authorization Bearer Token
- **Input Body**: 
```json
{
    "courseName": "Course Title",
    "courseDescription": "Course Description",
    "coursePrice": 100,
    "courseImagelink": "https://example.com/image.jpg"
}
```
- **Response**: 
```json
{
    "message": "Course created successfully",
    "courseId": "<course-id>"
}
```

#### GET /admin/courses
Retrieves all courses. Requires admin authentication.
- **Headers**: Authorization Bearer Token
- **Response**: Array of course objects

#### PUT /admin/courses/:courseId
Updates an existing course. Requires admin authentication.
- **Headers**: Authorization Bearer Token
- **Input Body**: 
```json
{
    "courseName": "Updated Title",
    "courseDescription": "Updated Description",
    "coursePrice": 150,
    "courseImagelink": "https://example.com/new-image.jpg"
}
```
- **Response**: 
```json
{
    "message": "Course updated successfully",
    "course": {
        // Updated course object
    }
}
```

#### DELETE /admin/courses/:courseId
Deletes a course and removes it from all users' purchased courses. Requires admin authentication.
- **Headers**: Authorization Bearer Token
- **Response**: 
```json
{
    "message": "Course deleted successfully"
}
```

## User Routes

### Authentication

#### POST /user/signup
Creates a new user account.
- **Input Body**: 
```json
{
    "username": "user",
    "password": "password"
}
```
- **Response**: 
```json
{
    "message": "user created"
}
```

#### POST /user/signin
Authenticates a user and returns a JWT token.
- **Input Body**: 
```json
{
    "username": "user",
    "password": "password"
}
```
- **Response**: 
```json
{
    "token": "<jwt-token>"
}
```

### Course Management

#### GET /user/courses
Lists all available courses. No authentication required.
- **Response**: Array of course objects

#### POST /user/courses/:id
Purchases a course. Requires user authentication.
- **Headers**: Authorization Bearer Token
- **Response**: 
```json
{
    "message": "Course purchased successfully"
}
```

#### GET /user/purchasedCourses
Lists all courses purchased by the authenticated user. Requires user authentication.
- **Headers**: Authorization Bearer Token
- **Response**: Array of purchased course objects

### Profile Management

#### PUT /user/profile
Updates user profile information. Requires user authentication.
- **Headers**: Authorization Bearer Token
- **Input Body**: 
```json
{
    "newUsername": "newUsername",     // Optional
    "currentPassword": "currentPass", // Required for password change
    "newPassword": "newPass"         // Optional
}
```
- **Response**: 
```json
{
    "message": "Profile updated successfully",
    "username": "newUsername"
}
```

#### DELETE /user/profile
Deletes user account. Requires user authentication and password confirmation.
- **Headers**: Authorization Bearer Token
- **Input Body**: 
```json
{
    "username": "user",
    "password": "password"
}
```
- **Response**: 
```json
{
    "message": "Account deleted successfully"
}
```

## Error Responses

All endpoints may return the following error responses:
- 400: Bad Request (Invalid input)
- 401: Unauthorized (Invalid or missing token)
- 404: Not Found
- 500: Internal Server Error

## Environment Variables Required

- `JWT_SECRET`: Secret key for JWT token generation/verification
- `mongo_URL`: MongoDB connection string

## Models

### Admin
- username (String, required, unique)
- password (String, required)

### User
- username (String, required, unique)
- password (String, required)
- purchasedCourses (Array of Course ObjectIds)

### Course
- courseName (String, required)
- courseDescription (String, required)
- coursePrice (Number, required)
- courseImagelink (String, required)
